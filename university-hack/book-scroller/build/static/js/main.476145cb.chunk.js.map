{"version":3,"sources":["grid/book/media/like.svg","grid/book/media/dislike.svg","grid/info-box/media/cross.svg","grid/info-box/media/like.svg","grid/info-box/media/dislike.svg","utils.js","grid/book/Book.js","grid/info-box/InfoBox.js","grid/loading/Loading.js","grid/Grid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getCookie","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getParents","node","parents","parent","parentNode","e","apiRequest","func","apiMethod","data","method","xhttp","XMLHttpRequest","onreadystatechange","this","readyState","status","response","JSON","parse","responseText","window","location","protocol","host","hostname","open","setRequestHeader","send","stringify","Book","props","book","onClick","categorize","id","image_link","category","Array","from","getElementsByClassName","forEach","item","classList","remove","target","toggle","className","src","alt","likeSVG","dislikeSVG","slice","join","React","Component","InfoBox","popupForm","author","description","labels","ref","crossSVG","map","index","key","Loading","style","background","color","keys","_","Grid","columnsNumber","screenWidth","state","popup","createRef","prevProps","prevState","setState","onmousedown","includes","current","togglePopup","sizes","4","3","2","1","allBooks","loading","columns","overallHeight","books","image_height","image_width","Math","ceil","minHeight","min","c","col","find","push","bind","App","innerWidth","categorizedBooks","onresize","onscroll","innerHeight","pageYOffset","body","offsetHeight","loadBooks","bookId","b","newCategory","Boolean","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.476145cb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/like.ea03542f.svg\";","module.exports = __webpack_public_path__ + \"static/media/dislike.81d883b3.svg\";","module.exports = __webpack_public_path__ + \"static/media/cross.e49095af.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.ea03542f.svg\";","module.exports = __webpack_public_path__ + \"static/media/dislike.81d883b3.svg\";","const getCookie = (name) => {\n    let cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n            const cookie = cookies[i].trim();\n            if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n};\n\nexport const getParents = (node, parents = [node]) => {\n    try {\n        const parent = node.parentNode;\n        if (parent) {\n            return getParents(node.parentNode, [...parents, parent])\n        } else {\n            return parents\n        }\n    } catch (e) {\n        return []\n    }\n};\n\nexport function apiRequest (\n    func,\n    apiMethod,\n    {\n        data = false,\n        method = \"GET\",\n    } = {}\n) {\n    const xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function () {\n        if (this.readyState === 4 && this.status === 200) {\n            const response = JSON.parse(this.responseText);\n            func(response)\n        }\n    };\n    const {protocol, host, hostname} = window.location;\n    if (protocol === 'http:') {\n        xhttp.open(method, `${protocol}//${hostname}:8000/api/${apiMethod}/`, true);\n    } else {\n        xhttp.open(method, `${protocol}//${host}/api/${apiMethod}/`, true);\n    }\n    if (data) {\n        xhttp.setRequestHeader(\"Content-Type\", \"application/json\");\n        xhttp.setRequestHeader(\"X-CSRFToken\", getCookie('csrftoken'));\n        xhttp.send(JSON.stringify(data));\n    } else {\n        xhttp.send()\n    }\n}\n","import React from \"react\";\nimport './styles.scss';\nimport likeSVG from './media/like.svg';\nimport dislikeSVG from './media/dislike.svg';\nimport {getParents} from \"../../utils\";\n\nexport class Book extends React.Component {\n\n    render() {\n        const {\n            book,\n            onClick,\n            categorize\n        } = this.props;\n        const {\n            id,\n            name,\n            image_link,\n            category\n        } = book;\n        return (\n            <div onClick={e => {\n                Array.from(document.getElementsByClassName('book'))\n                    .forEach(item => {item.classList.remove('active')});\n                getParents(e.target)[1].classList.toggle('active')\n            }} className={`book${category !== '' ? ` categorized ${category}`: ''}`}>\n                <img className=\"cover\" src={image_link} alt=\"book\"/>\n                {category === 'interested' && <div className=\"categorized liked\">\n                    <img src={likeSVG} alt=\"interested in\"/>\n                </div>}\n                {category === 'not_interested' && <div className=\"categorized disliked\">\n                    <img src={dislikeSVG} alt=\"not interested in\"/>\n                </div>}\n                <div className=\"options\">\n                    <button onClick={() => {\n                        categorize(id, 'interested')\n                    }} className=\"like\">\n                        <div className={`img-box${category === 'interested' ? ' active' : ''}`}>\n                            <img src={likeSVG} alt=\"interested in\"/>\n                        </div>\n                    </button>\n                    <button onClick={() => {\n                        onClick(book)\n                    }} className=\"info\">\n                        <div className=\"info-box\">\n                            <div className=\"name\">\n                                {name.split(' ').slice(0, 3).join(' ')}{name.split(' ').length > 3 ? '...' : ''}\n                            </div>\n                        </div>\n                    </button>\n                    <button onClick={() => {\n                        categorize(id, 'not_interested')\n                    }} className=\"dislike\">\n                        <div className={`img-box${category === 'not_interested' ? ' active' : ''}`}>\n                            <img src={dislikeSVG} alt=\"not interested in\"/>\n                        </div>\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport './styles.scss';\nimport crossSVG from './media/cross.svg';\nimport likeSVG from './media/like.svg';\nimport dislikeSVG from './media/dislike.svg';\n\nexport class InfoBox extends React.Component {\n    render() {\n        const {\n            popupForm,\n            toggle,\n            id,\n            name,\n            author,\n            description,\n            labels,\n            category,\n            categorize\n        } = this.props;\n        return (\n            <div className=\"info-popup\">\n                <div ref={popupForm} className=\"form\">\n                    <span onClick={toggle} className=\"close\">\n                        <img src={crossSVG} alt=\"close\"/>\n                    </span>\n                    <div className=\"name\">{name}</div>\n                    <div className=\"author\">{author}</div>\n                    <div className=\"labels\">\n                        {labels.split(';').slice(0, labels.split(';').length - 1).map((item, index) => (\n                            <div key={index} className=\"label\">\n                                {item}\n                            </div>\n                        ))}\n                    </div>\n                    <div className=\"description\">{description}</div>\n                    <div className=\"buttons\">\n                        <img onClick={() => {\n                            categorize(id, 'interested')\n                        }} className={`like${category === 'interested' ? ' active' : ''}`} src={likeSVG}\n                             alt=\"interested in\"/>\n                        <img onClick={() => {\n                            categorize(id, 'not_interested')\n                        }} className={`dislike${category === 'not_interested' ? ' active' : ''}`} src={dislikeSVG}\n                             alt=\"not interested in\"/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}","import React from \"react\";\nimport './styles.scss';\n\nexport class Loading extends React.Component {\n    render() {\n        const style = {background: this.props.color};\n        return (\n            <div className=\"loading\">\n                <div className=\"anim-box\">\n                    {[...Array(3).keys()].map((_, index) => (\n                        <div key={index} style={style} className=\"circle\"/>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport './styles.scss';\nimport {Book} from \"./book/Book\";\nimport {InfoBox} from \"./info-box/InfoBox\";\nimport {Loading} from \"./loading/Loading\";\nimport {getParents} from \"../utils\";\n\nexport class Grid extends React.Component {\n    constructor(props) {\n        super(props);\n\n        let columnsNumber = 4;\n        const {screenWidth} = props;\n        if (screenWidth <= 1280) {\n            columnsNumber = 3\n        }\n        if (screenWidth <= 960) {\n            columnsNumber = 2\n        }\n        if (screenWidth <= 640) {\n            columnsNumber = 1\n        }\n        this.state = {\n            popup: false,\n            columnsNumber: columnsNumber\n        };\n\n        this.popupForm = React.createRef();\n    }\n\n    componentDidUpdate(prevProps, prevState, _) {\n        let columnsNumber = 4;\n        const {screenWidth} = prevProps;\n        if (screenWidth <= 1280) {\n            columnsNumber = 3\n        }\n        if (screenWidth <= 960) {\n            columnsNumber = 2\n        }\n        if (screenWidth <= 640) {\n            columnsNumber = 1\n        }\n        if (columnsNumber !== prevState.columnsNumber) {\n            this.setState({\n                columnsNumber: columnsNumber\n            })\n        }\n    }\n\n    componentDidMount() {\n        window.onmousedown = e => {\n            if (!getParents(e.target).includes(this.popupForm.current) && this.state.popup) {\n                this.togglePopup();\n            }\n        }\n    }\n\n    togglePopup(book = false) {\n        this.setState({popup: !this.state.popup ? book : false})\n    }\n\n    render() {\n        const {\n            columnsNumber,\n            popup\n        } = this.state;\n        const sizes = {\n            4: 256,\n            3: 245,\n            2: 224,\n            1: 0\n        };\n        const {\n            allBooks,\n            categorize,\n            loading\n        } = this.props;\n        let columns = [...Array(columnsNumber).keys()].map(() => ({overallHeight: 0, books: []}));\n        allBooks.forEach((book) => {\n            let {image_height, image_width} = book;\n            image_height = Math.ceil(image_height * sizes[columnsNumber] / image_width);\n            let minHeight = Math.min(...columns.map(c => c.overallHeight));\n            const col = columns.find(c => (c.overallHeight === minHeight));\n            col.books.push(book);\n            col.overallHeight += image_height;\n        });\n        return (\n            <>\n                {popup && <InfoBox popupForm={this.popupForm} categorize={categorize} {...popup} toggle={this.togglePopup.bind(this)} />}\n                <div className={`grid${popup ? ' blurred' : ''}`}>\n                    {columns.map(({books}, index) => (\n                        <div key={index} className=\"col\">\n                            {books.map((book, index) => (\n                                <Book key={index} categorize={categorize} book={book} onClick={this.togglePopup.bind(this)}/>\n                            ))}\n                        </div>\n                    ))}\n                </div>\n                {loading && <Loading/>}\n            </>\n        );\n    }\n}\n","import React from 'react';\nimport {Grid} from \"./grid/Grid\";\nimport {apiRequest} from \"./utils\";\nimport './static/common.scss';\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            screenWidth: window.innerWidth,\n            allBooks: [],\n            categorizedBooks: {}\n        }\n    }\n\n    componentDidMount() {\n        window.onresize = () => {\n            this.setState({screenWidth: window.innerWidth})\n        };\n        window.onscroll = () => {\n            const {loading} = this.state;\n            if ((window.innerHeight + window.pageYOffset) >= document.body.offsetHeight - 2 && !loading) {\n                this.loadBooks()\n            }\n        };\n        apiRequest(({books}) => {\n            this.setState({allBooks: [...this.state.allBooks, ...books], loading: false})\n        }, 'load_books', {data: {books: {}}, method: \"POST\"})\n    }\n\n    categorize(bookId, category) {\n        const {\n            allBooks,\n            categorizedBooks\n        } = this.state;\n        const book = allBooks.find(b => b.id === bookId);\n        const newCategory = book.category === category ? '' : category;\n        book.category = newCategory;\n        this.setState({\n            allBooks: allBooks,\n            categorizedBooks: {...categorizedBooks, [bookId]: newCategory}\n        })\n    }\n\n    loadBooks() {\n        const {categorizedBooks, allBooks} = this.state;\n        this.setState({loading: true});\n        apiRequest(({books}) => {\n            this.setState({allBooks: [...allBooks, ...books], loading: false})\n        }, 'load_books', {data: {books: categorizedBooks}, method: \"POST\"})\n    }\n\n    render() {\n        return (\n            <div>\n                <Grid categorize={this.categorize.bind(this)} {...this.state}/>\n            </div>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}